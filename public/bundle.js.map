{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://project2/./src/service.js","webpack://project2/webpack/bootstrap","webpack://project2/webpack/runtime/define property getters","webpack://project2/webpack/runtime/hasOwnProperty shorthand","webpack://project2/webpack/runtime/make namespace object","webpack://project2/./src/app.js"],"sourcesContent":["export function fetchLogin(username) {\n    return fetch('/api/v1/session/', {\n        method: 'POST',\n        headers: {\n        'content-type': 'application/json', // set this header when sending JSON in the body of request\n        },\n        body: JSON.stringify( { username } ),\n    })\n    .catch( err => Promise.reject({ error: 'network-error' }) )\n    .then( response => {\n        if(!response.ok) { \n        return response.json().then( err => Promise.reject(err) );\n        }\n      return response.json(); // happy status code means resolve with data from service\n    });\n}\n\nexport function fetchChatHistory() {\n    return fetch('/api/v1/chatHistory/', {\n        method: 'GET',\n        headers: {\n        'content-type': 'application/json', // set this header when sending JSON in the body of request\n        },\n    })\n    .catch( err => {\n        console.error(err);\n        Promise.reject({ error: 'network-error' })\n    } )\n    .then( response => {\n        if(!response.ok) { \n        return response.json().then( err => Promise.reject(err) );\n        }\n      return response.json(); // happy status code means resolve with data from service\n    });   \n};\n\nexport function fetchLogout() {\n    return fetch('/api/v1/session/', {\n        method: 'DELETE',\n        headers: {\n        'content-type': 'application/json', // set this header when sending JSON in the body of request\n        },\n    })\n    .catch( err => Promise.reject({ error: 'network-error' }) )\n    .then( response => {\n        if(!response.ok) { \n        return response.json().then( err => Promise.reject(err) );\n        }\n      return response.json(); // happy status code means resolve with data from service\n    });   \n};\n\nexport function postMessage(message) {\n    return fetch('/api/v1/message', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json',\n        },\n        body: JSON.stringify( { message } ),\n    })\n    .then((response) => {\n        if(!response.ok) { \n            return response.json().then(err => Promise.reject(err));\n        }\n        return response.json(); // happy status code means resolve with data from service\n    })\n    .catch((error) => {\n        throw error;\n    })\n}\n\nexport function fetchExistingSessions() {\n    return fetch('/api/v1/session/', {\n        method: 'GET',\n        headers: {\n        'content-type': 'application/json',    \n        }\n})\n.catch( err => Promise.reject({ error: 'network-error' }) )\n    .then( response => {\n        if(!response.ok) { \n        return response.json().then( err => Promise.reject(err) );\n        }\n        return response.json(); \n    });   \n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nimport { fetchLogin, fetchChatHistory, fetchExistingSessions, postMessage, fetchLogout } from './service';\n\nconst PAGES = {\n    LOGIN: 'login',\n    CHAT: 'chat',\n    LOADING: 'loading',\n    FETCH: 'fetch'\n};\n\nfunction app() {\n    const appEl = document.querySelector('#app');\n    const loginEl = document.querySelector('#login-div');\n    const userEl = document.querySelector('.user-div');\n    const chatEl = document.querySelector('.chat-div');\n    const newMessageEl = document.querySelector('.new-message');\n\n    let intervalId = -1;\n\n    const state = {\n        userName: '',\n        page: PAGES.LOGIN,\n        userList: [],\n        messages: [],\n        errorMessage: ''\n    };\n    function render() {\n        if (state.page === PAGES.LOGIN) {\n            renderLogin();\n            return;\n        }\n        if (state.page === PAGES.CHAT) {\n            renderChats();\n            renderErrorMessage();\n            renderNewMessage();\n            return;\n        }\n        if (state.page === PAGES.FETCH) {\n            renderChatHistory();\n            renderUserList();\n            renderErrorMessage();\n            return;\n        }\n        if (state.page === PAGES.LOADING) {\n            renderSpinner();\n            return;\n        }\n    }\n\n    function renderUserList() {\n        const userList = document.querySelector('#user-list-ul');\n        let userListHTML = '';\n        state.userList.forEach(userName => {\n            userListHTML +=\n                `<li>\n                    <span>${userName}</span>\n                </li>`;\n        });\n        userList.innerHTML = userListHTML;\n    }\n\n    function renderChatHistory() {\n        const chatHistory = document.querySelector('.chat-ul');\n        if (chatHistory) {\n            let messageHistory = '';\n            state.messages.reverse().forEach((object) => {\n                if (state.userName === object.userName) {\n                    messageHistory +=\n                        `<li class='chat-msg'>\n                    <span class=\"user-name\">${object.userName}</span>\n                    <span class=\"time-stamp\">${new Date(object.timeStamp).toLocaleString('en-US')}</span>\n                    <p class=\"message-block\">${object.message}</p>\n                </li>`;\n                } else {\n                    messageHistory +=\n                        `<li class='other-chat-msg'>\n                    <span class=\"user-name\">${object.userName}</span>\n                    <span class=\"time-stamp\">${new Date(object.timeStamp).toLocaleString('en-US')}</span>\n                    <p class=\"message-block\">${object.message}</p>\n                </li>`;\n                }\n                });\n            chatHistory.innerHTML = messageHistory;\n        }\n    }\n\n    function renderErrorMessage() {\n        const loginErrorEl = document.querySelector('#error-message');\n        if (loginErrorEl) {\n            loginErrorEl.innerHTML = `<span class=\"warning-message\">${state.errorMessage}</span>`;\n        }\n    }\n\n    function renderSpinner() {\n        loginEl.innerHTML = `<div class='spinner'>Loading...</div>`\n    }\n\n    function renderLogin() {\n        chatEl.innerHTML = '';\n        newMessageEl.innerHTML = '';\n        state.page = PAGES.LOADING;\n        render();\n        // The SPA will determine (using a service call) on load if the user is already logged in. \n        // Users that are already logged in are not required to login again.\n        fetchExistingSessions()\n            .then((response) => {\n                if (response) {\n                    state.userName = response.username;\n                    state.page = PAGES.CHAT;\n                    fetchChatHistoryAndRender();\n                    // Every 5 seconds (roughly) the client side will check to see \n                    // if there are new messages and/or if the list of currently logged in users \n                    // has changed\n                    intervalId = setInterval(() => {\n                        state.page = PAGES.FETCH;\n                        fetchChatHistoryAndRender();\n                    }, 5000);\n                } else {\n                    state.page = PAGES.LOGIN;\n                    showLogInEl();\n                }\n            })\n            .catch(() => {\n                state.page = PAGES.LOGIN;\n                showLogInEl();\n                renderErrorMessage();\n            });\n    }\n\n    function showLogInEl() {\n        loginEl.innerHTML =\n            `<h1 class=\"home-title\">Chat App</h1>\n                <div class=\"user-login\">\n                <h2 class=\"login-title\">Login</h2>\n                <label for=\"username\"><b>Username</b>\n                    <input id=\"username-input\" type=\"text\" placeholder=\"Enter Username\" name=\"username\" required>\n                </label>\n                <button class=\"login-btn\" type=\"submit\" data-target=\"chat\">Login</button>\n                <div id=\"error-message\"></div>\n            </div>`;\n    }\n\n    function renderChats() {\n        loginEl.innerHTML = '';\n        let userList = '';\n        state.userList.forEach(userName => {\n            userList +=\n                `<li>\n                    <span>${userName}</span>\n                </li>`;\n        });\n        let messageHistory = '';\n        state.messages.reverse().forEach((object) => {\n            if (state.userName === object.userName) {\n                messageHistory +=\n                    `<li class='chat-msg'>\n                <span class=\"user-name\">${object.userName}</span>\n                <span class=\"time-stamp\">${new Date(object.timeStamp).toLocaleString('en-US')}</span>\n                <p class=\"message-block\">${object.message}</p>\n            </li>`;\n            } else {\n                messageHistory +=\n                    `<li class='other-chat-msg'>\n                <span class=\"user-name\">${object.userName}</span>\n                <span class=\"time-stamp\">${new Date(object.timeStamp).toLocaleString('en-US')}</span>\n                <p class=\"message-block\">${object.message}</p>\n            </li>`;\n            }\n\n        })\n        chatEl.innerHTML = `<div class=\"chat-box\">\n            <h1 class=\"title\">Chat App</h1> \n            <span class=\"login-title\">${state.userName}, Welcome to the Chat App !</span>   \n            <div class=\"chat-message\">\n            <div class=\"chat-content\">\n                <ul class=\"chat-ul\">\n                    ${messageHistory}\n                </ul>\n                </div>\n                <div class=\"logged-users\">\n                <h2>User List</h2> \n                <ul id=\"user-list-ul\">\n                    ${userList}\n                </ul>\n            </div>\n            </div>\n        `;\n        const chatContent = document.querySelector('.chat-ul')\n        chatContent.scrollTop = chatContent.scrollHeight\n    }\n\n    function renderNewMessage() {\n        newMessageEl.innerHTML = `\n            <div class=\"send-button\">\n                <div id=\"error-message\"></div>\n                <input id=\"new-message\" type=\"text\" placeholder=\"Enter New Message\">\n                <button data-target=\"chat\" class=\"chat-btn\">Send</button>\n                <button id=\"logout-btn\" class=\"logout-btn\" type=\"logout\" data-target=\"log-out\">Logout</button>\n            </div>\n            `\n    }\n\n    appEl.addEventListener('click', (e) => {\n        if (e.target.classList.contains('login-btn')) {\n            const username = document.getElementById('username-input');\n            fetchLogin(username.value).then((response) => {\n                const target = e.target.dataset.target;\n                state.page = target;\n                state.errorMessage = '';\n                state.userName = response.username;\n                fetchChatHistoryAndRender();\n                // Every 5 seconds (roughly) the client side will check to see \n                // if there are new messages and/or if the list of currently logged in users \n                // has changed\n                intervalId = setInterval(() => {\n                    state.page = PAGES.FETCH;\n                    fetchChatHistoryAndRender();\n                }, 5000);\n            }).catch((error) => {\n                state.errorMessage = getErrorMessageByError(error.error);\n                render();\n            });\n\n            return;\n        }\n\n        if (e.target.classList.contains('chat-btn')) {\n            const message = document.getElementById('new-message');\n            postMessage(message.value)\n                .then((response) => {\n                    if (response) {\n                        state.page = PAGES.FETCH;\n                        state.errorMessage = '';\n                        state.messages = response.messages;\n                        message.value = '';\n                        render();\n                    }\n                })\n                .catch((error) => {\n                    state.page = PAGES.FETCH;\n                    state.errorMessage = getErrorMessageByError(error.error);\n                    render();\n                });\n\n            return;\n        }\n\n        if (e.target.classList.contains('logout-btn')) {\n            fetchLogout().then((response) => {\n                state.page = PAGES.LOGIN;\n                if (intervalId !== -1) {\n                    clearInterval(intervalId);\n                }\n                state.errorMessage = '';\n                render();\n            });\n            return;\n        }\n    });\n\n    render();\n\n    function getErrorMessageByError(error) {\n        if (error === 'auth-missing') {\n            return 'Please make sure user is logged in';\n        } else if (error === 'required-message') {\n            return 'Please enter text message';\n        } else if (error === 'invalid-username') {\n            return 'Please enter a valid username, no special characters';\n        } else if (error === 'auth-insufficient') {\n            return `dog can't be used as username`;\n        } else {\n            return 'An error occurred';\n        }\n    }\n\n    function fetchChatHistoryAndRender() {\n        fetchChatHistory().then((userListResponse) => {\n            state.userList = userListResponse.sessionList;\n            state.messages = userListResponse.messages;\n\n            render();\n        });\n    }\n};\n\napp();\n"],"names":["fetchLogin","username","fetch","method","headers","body","JSON","stringify","err","Promise","reject","error","then","response","ok","json","fetchChatHistory","console","fetchLogout","postMessage","message","fetchExistingSessions","PAGES","LOGIN","CHAT","LOADING","FETCH","app","appEl","document","querySelector","loginEl","userEl","chatEl","newMessageEl","intervalId","state","userName","page","userList","messages","errorMessage","render","renderLogin","renderChats","renderErrorMessage","renderNewMessage","renderChatHistory","renderUserList","renderSpinner","userListHTML","forEach","concat","innerHTML","chatHistory","messageHistory","reverse","object","Date","timeStamp","toLocaleString","loginErrorEl","fetchChatHistoryAndRender","setInterval","showLogInEl","chatContent","scrollTop","scrollHeight","addEventListener","e","target","classList","contains","getElementById","value","dataset","getErrorMessageByError","clearInterval","userListResponse","sessionList"],"sourceRoot":""}